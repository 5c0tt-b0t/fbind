#!/sbin/sh -x
##########################################################################################
#
# Magisk Module Template Install Script
# by topjohnwu
#
##########################################################################################

# Detect whether in boot mode
pgrep zygote | grep -v grep >/dev/null && BOOTMODE=true || BOOTMODE=false ###
$BOOTMODE || ps -A 2>/dev/null | grep zygote | grep -v grep >/dev/null && BOOTMODE=true

TMPDIR=/dev/tmp
INSTALLER=$TMPDIR/install
MAGISKBIN=/data/adb/magisk
[ -d $MAGISKBIN ] || MAGISKBIN=/data/magisk ###

# Default permissions
umask 022

# Initial cleanup
rm -rf $TMPDIR 2>/dev/null
mkdir -p $INSTALLER

# echo before loading util_functions
ui_print() { echo "$1"; }

require_new_magisk() {
  ui_print "***********************"
  ui_print "! Magisk is not instaled" ###
  ui_print "***********************"
  exit 1
}

##########################################################################################
# Environment
##########################################################################################

OUTFD=$2
ZIP="$3" ###

mount /data 2>/dev/null

# Utility functions must exist
[ -f $MAGISKBIN/util_functions.sh ] || require_new_magisk
# Load utility fuctions
. $MAGISKBIN/util_functions.sh

# We can't alter magisk image live, use alternative image if required ###
if $BOOTMODE; then
  if [ "$MAGISKBIN" != "/data/magisk" ]; then
    IMG=/data/adb/magisk_merge.img
  else
    IMG=/data/magisk_merge.img
  fi
else
  if [ "$MAGISKBIN" != "/data/magisk" ]; then
    IMG=/data/adb/magisk.img
  else
    IMG=/data/magisk.img
  fi
fi

# Always mount under tmp
MOUNTPATH=$TMPDIR/magisk_img

# Preperation for flashable zips
get_outfd

# Mount partitions
mount_partitions

# Detect version and architecture
api_level_arch_detect

# You can get the Android API version from $API, the CPU architecture from $ARCH
# Useful if you are creating Android version / platform dependent mods

# Setup busybox and binaries
$BOOTMODE && boot_actions || recovery_actions

##########################################################################################
# Preparation
##########################################################################################

# Extract common files
unzip -o "$ZIP" module.prop config.sh 'common/*' -d $INSTALLER >&2

[ ! -f $INSTALLER/config.sh ] && abort "! Unable to extract zip file!"
# Load configurations
. $INSTALLER/config.sh

# Check the installed magisk version ###
#MIN_VER=`grep_prop minMagisk $INSTALLER/module.prop`
#[ ! -z $MAGISK_VER_CODE -a $MAGISK_VER_CODE -ge $MIN_VER ] || require_new_magisk
MODID=`grep_prop id $INSTALLER/module.prop`
MODPATH=$MOUNTPATH/$MODID

# Print mod name
print_modname

# Please leave this message in your flashable zip for credits :)
ui_print "******************************"
ui_print "Powered by Magisk (@topjohnwu)"
ui_print "******************************"

##########################################################################################
# Install
##########################################################################################

# Get the variable reqSizeM. Use your own method to determine reqSizeM if needed
request_zip_size_check "$ZIP"

# This function will mount $IMG to $MOUNTPATH, and resize the image based on $reqSizeM
mount_magisk_img

##########################################################################################

# Environment
fbind_dir=/data/media/$MODID
info_dir=$fbind_dir/info
config_file=$fbind_dir/config.txt
if [ "$MAGISKBIN" != "/data/magisk" ]; then
  ModPath=/sbin/.core/img/$MODID
else
  ModPath=/magisk/$MODID
fi

# Create mod paths
if [ -f $ModPath/module.prop ]; then
  CurVersionCode="`grep_prop 'versionCode' $ModPath/module.prop`"
else
  CurVersionCode=0
fi
rm -rf $MODPATH 2>/dev/null
mkdir -p $MODPATH
mkdir -p $info_dir 2>/dev/null

# Update fbind_dir (preserves config)
if [ "$CurVersionCode" -lt '201801020' ]; then
  unzip -o "$ZIP" config_updater.sh -d $INSTALLER >&2
  . $INSTALLER/config_updater.sh
fi

# Extract files
ui_print "- Extracting module files"
if echo "$ARCH" | grep -q arm; then
  unzip -o "$ZIP" 'bin/*' -d $MODPATH >&2
  mv $MODPATH/bin/cryptsetup_arm $MODPATH/bin/cryptsetup
fi
unzip -o "$ZIP" core.sh 'system/*' -d $MODPATH >&2
[ -f /data/.xfbind ] && mv $MODPATH/system/bin $MODPATH/system/xbin
unzip -o "$ZIP" Changelog.md config_samples.txt README.md -d $info_dir >&2
[ -f $info_dir/License.txt ] || unzip -o "$ZIP" 'License.md' -d $info_dir >&2
chown -R media_rw:media_rw $fbind_dir

##########################################################################################

# Patch platform.xml -- storage permissions
ui_print "- Patching /system/etc/permissions/platform.xml"
XML_mod_dir=$MODPATH/system/etc/permissions

XML_list="/sbin/.core/mirror/system/etc/permissions/platform.xml
/dev/magisk/mirror/system/etc/permissions/platform.xml
/system/etc/permissions/platform.xml"

for f in $XML_list; do
  if [ -f "$f" ]; then
    cp "$f" $INSTALLER
    # Export /system size for platform.xml automatic re-patching across ROM updates
    du -s "$(echo "$f" | sed 's/\/etc.*//')" | cut -f1 >$MODPATH/.SystemSizeK
    break
  fi
done

PERMS="READ_EXTERNAL_STORAGE
WRITE_EXTERNAL_STORAGE"

sed -i '/<\/permissions>/d; /READ_EXTERNAL_STORAGE/d; /WRITE_EXTERNAL_STORAGE/d' $INSTALLER/platform.xml
echo >>$INSTALLER/platform.xml

for PERM in $PERMS; do
  cat <<BLOCK
  <permission name="android.permission.$PERM" >
    <group gid="media_rw" />
    <group gid="sdcard_rw" />
  </permission>"

BLOCK
done >>$INSTALLER/platform.xml

echo "</permissions>" >>$INSTALLER/platform.xml

mkdir -p $XML_mod_dir
mv $INSTALLER/platform.xml $XML_mod_dir

##########################################################################################

# Restore config backup
if $BOOTMODE; then
  BkpSearchPath=/mnt/media_rw
else
  BkpSearchPath=/external_sd
fi

BkpDir="$(find "$BkpSearchPath" -type d -name ".fbind_bkp" 2>/dev/null)"

if [ -f "$BkpDir/config.txt" ] && [ ! -f "$config_file" ]; then
  cp -a "$BkpDir/config.txt" "$config_file" 2>/dev/null
fi

##########################################################################################

# Remove placeholder
rm -f $MODPATH/system/placeholder 2>/dev/null

# Handle replace folders
for TARGET in $REPLACE; do
  mktouch $MODPATH$TARGET/.replace
done

# Auto Mount
$AUTOMOUNT && touch $MODPATH/auto_mount

# prop files
$PROPFILE && cp -af $INSTALLER/common/system.prop $MODPATH/system.prop

# Module info
cp -af $INSTALLER/module.prop $MODPATH/module.prop
if $BOOTMODE; then
  # Update info for Magisk Manager ###
  mktouch $ModPath/update
  cp -af $INSTALLER/module.prop $ModPath/module.prop
fi

# post-fs-data mode scripts
$POSTFSDATA && cp -af $INSTALLER/common/post-fs-data.sh $MODPATH/post-fs-data.sh

# service mode scripts
$LATESTARTSERVICE && cp -af $INSTALLER/common/service.sh $MODPATH/service.sh

ui_print "- Setting permissions"
set_permissions

##########################################################################################
# Finalizing
##########################################################################################

# Unmount magisk image and shrink if possible
unmount_magisk_img

$BOOTMODE || recovery_cleanup
rm -rf $TMPDIR

ui_print "- Done"
exit 0
