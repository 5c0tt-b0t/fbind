#!/system/bin/sh
# fbind
# VR25 @ XDA Developers


# Environment
PATH="/sbin/.core/busybox:/dev/magisk/bin:$PATH"
ModID=fbind
umask 022


# Root check
# if ! id 2>/dev/null | grep -iq 'root'; then
# 	echo -e "\n(!) $ModID must run as root.\n"
# 	exit 1
# fi
echo


# Intelligently toggle SELinux mode
SEck="$(ls -1 $(echo "$PATH" | sed 's/:/ /g') 2>/dev/null | grep -E 'sestatus|getenforce' | head -n1)"

if [ -n "$SEck" ]; then
	if $SEck | grep -iq enforcing; then
		was_enforcing=true
		setenforce 0
	else
		was_enforcing=false
	fi
fi


# Find ModPath
for loop_device in /dev/block/loop*; do
	if losetup $loop_device 2>/dev/null | grep -q '\(/data/.*magisk.img\)'; then
		while read MountPoint; do
			if [ -f "$MountPoint/$ModID/module.prop" ]; then
				ModPath=$MountPoint/$ModID
				break 2
			fi
		done <<< "$(grep $loop_device /proc/mounts | awk '{print $2}' | grep -v '/system')"
	fi
done

if [ ! -f "$ModPath/module.prop" ]; then
  echo -e "(!) $ModID path not found"
  echo -e "- Unsupported Magisk version or not running as root (su)\n"
  exit 1
fi

export tk=true
. $ModPath/core.sh
export PATH="$PATH:$ModPath/bin"
tmp=$fbind_dir/.term_tmp
tmp2=$fbind_dir/.term_tmp2
service_enabled=$ModPath/service.sh
service_disabled=$ModPath/service.disabled



# Yes/No prompt
yn() {
	case "$1" in
		[Yy]* ) "$2";;
		[Nn]* ) exit 0;;
		* ) echo "(!) Invalid INPUT! Please re-run the command and answer yes or no."; exit 1;;
	esac
}

# Move data
mvdt() {
	if ! is_mounted "$1" && [ "$(ls "$1" 2>/dev/null)" ]; then
		echo "[$3]"
		[ -d "$1" ] || mkdir -p -m 777 "$1"
		[ -d "$2" ] || mkdir -p -m 777 "$2"
		cp -a "$1"/* "$2" 2>/dev/null
		rm -rf "$1"/*
	fi
}

# Move data (rollback)
mvdtR() {
	if is_mounted "$2" && [ "$(ls "$1" 2>/dev/null)" ]; then
		umount "$2"
		echo "[$3]"
		cp -a "$1"/* "$2" 2>/dev/null
		rm -rf "$1"
	fi
}

# Unmount
umnt() {
	if is_mounted "$1"; then
		echo "[$2]"
		umount "$1"
	fi
}


usage() {
	cat <<END
Magic Folder Binder

Usage: fbind OPTION(s) ARGUMENT(s)

-a --> Add line(s) to config.txt (interactive)
-b --> Bind all
-c --> Storage cleanup
-d --> Disable auto-bind service
-e --> Re-enable auto-bind service
-f --> Disable this toolkit
-l --> Show config.txt
-m --> Move data to the SD card (unmounted folders only)
-r --> Remove lines(s) from config.txt (interactive)
-u --> Unmount all folders
-x --> Disable fbind
-mb --> Move data & bind corresponding folders
ref --> Display README
log --> Display debug.log

-ad --> Add "app_data" line(s) to config.txt (interactive)

-as --> Asks for SOURCE dirs (intsd/SOURCE) & adds corresponding "from_to" lines to config.txt (interactive)

-umb --> (!) Unmount all folders, move data & rebind

--restore --> Move select data back to original locations (interactive)

--rollback --> Unmount all folders, uninstall fbind & restore data

--uninstall --> Unmount all folders & uninstall fbind
END
	echo
}


enable_service() {
	mv -f $service_disabled $service_enabled
	chmod 755 $service_enabled
	echo -e "(i) Auto-bind enabled.\n"
}

disable_service() {
	mv -f $service_enabled $service_disabled
	echo "(i) Auto-bind disabled.\n"
}


# Add line(s) to fbind config
add_line() {
	echo -e "<Add config line(s)>\n"
	: > $tmp
	INPUT=0
	[ "$(tail -c 1 $config_file)" ] && printf "\n" >> $config_file
	
	if [ "$1" = '-ad' ]; then
		: > $tmp2
		echo "$(ls -1 /data/data)" >> $tmp

		if [ -z "$2" ]; then
			cat $tmp
			echo -e "\n(i) Input a matching word/string at a time."
			echo "- Hit ENTER when done or press CTRL (Vol. Down) + C to abort."
			until [ -z "$INPUT" ]; do
				read -r INPUT
				[ -n "$INPUT" ] && grep "$INPUT" $tmp | sed 's/^/app_data /' >> $tmp2
			done
		else
			grep "$2" $tmp | sed 's/^/app_data /' >> $tmp2
		fi
		
		if grep -q '[a-z]' $tmp2; then
			if [ -z "$2" ]; then echo "Added line(s):"; else echo "Added line:"; fi
			cat $tmp2 | tee -a $config_file
		else
			echo "(i) No line(s) added."
		fi
	
	elif [ "$1" = '-as' ]; then
		if [ -z "$2" ]; then
			echo "(i) Input a source path at a time (i.e., Download or \"WhatsApp/Media/WhatsApp Video\")."
			echo "- Hit ENTER when done or press CTRL (Vol. Down) + C to abort."
			until [ -z "$INPUT" ]; do
				read -r INPUT
				if [ -n "$INPUT" ]; then
					echo "from_to \"$INPUT\" \".fbind/$INPUT\"" >> $tmp
				fi
			done
		else
			echo "from_to \"$2\" \".fbind/$2\"" >> $tmp
		fi
		
		if grep -q '[a-z]' $tmp; then
			if [ -z "$2" ]; then echo "Added line(s):"; else echo "Added line:"; fi
			cat $tmp | tee -a $config_file
		else
			echo "(i) No line(s) added."
		fi
	
	elif [ "$1" = '-a' ]; then
		if [ -z "$2" ]; then
			echo -e "(i) Input one line at a time."
			echo "- Hit ENTER when done or press CTRL (Vol. Down) + C to abort."
			until [ -z "$INPUT" ]; do
				read -r INPUT
				[ -n "$INPUT" ] && echo "$INPUT" >> $tmp
			done
		else
			echo "$2" >> $tmp
		fi
		
		if grep -q '[a-z]' $tmp; then
			if [ -z "$2" ]; then echo "Added line(s):"; else echo "Added line:"; fi
			cat $tmp | tee -a $config_file
		else
			echo "(i) No line(s) added."
		fi
	fi
	set_perms $config_file
	echo
}


list_cfg() {
	echo -e "Your fbind config:\n"
	cat $config_file
	echo
}


move_data() {
	echo "Moving data..."
	
	# entire obb folder
	obb() { mvdt $intobb $extobb obb; }
	
	# game/app obb folder
	obbf() { mvdt $intobb/$1 $extobb/$1 "obbf $1"; }

	# target folder
	target() { mvdt "$intsd/$1" "$extsd/$1" "target \"$1\""; }
	
	# source <--> destination
	from_to() { mvdt "$intsd/$1" "$extsd/$2" "from_to \"$1\" \"$2\""; }

	# data/data/app <--> $extsd/.app_data/app_data_folder
	app_data() { mvdt "/data/data/$1" "$extsd/.app_data/$1" "app_data $1"; }
	
	# intsd <--> extsd/.fbind
	int_extf() { mvdt $intsd $extsd/.fbind "int_extf"; }
	
	# Other
	bind_mnt() {
		if ! is_mounted "$2" && [ "$(ls "$2" 2>/dev/null)" ] && [ "$3" = "-mv" ]; then
			echo "[$2]"
			[ -d "$1" ] || mkdir -p -m 777 "$1"
			cp -a "$2"/* "$1" 2>/dev/null
			rm -rf "$2"/*
		fi
	}
	
	: >$fbind_dir/.tmp
	grep -v '#' $config_file | grep -E 'app_data |int_extf|bind_mnt |obb|obbf |from_to |target ' >$fbind_dir/.tmp
	. $fbind_dir/.tmp

	echo -e "- Done.\n"
}


rm_line() {
	: >$tmp
	: >$tmp2
	INPUT=0
	if [ -z "$1" ]; then
		echo -e "<Remove Config Line(s)>\n"
		grep -v '^$' $config_file
		echo -e "\nInput a matching pattern at once."
		echo "- Hit ENTER when done or press CTRL (Vol. Down) + C to abort."
		until [ -z "$INPUT" ]; do
			read -r INPUT
			if [ -n "$INPUT" ]; then
				grep -v "$INPUT" $config_file >> $tmp
				grep "$INPUT" $config_file >> $tmp2
			fi
		done
	else
		grep -v "$1" $config_file >> $tmp
		grep "$1" $config_file >> $tmp2
	fi

	if grep -q '[a-z]' $tmp2; then
		mv $tmp $config_file
		set_perms $config_file
		if [ -z "$1" ]; then echo "Removed line(s):"; else echo "Removed line:"; fi
		cat $tmp2
		rm -f $tmp $tmp2
	else
		echo "No line(s) removed."
	fi
	echo
}


unmount_folders() {	
	echo 'Unmounting folders...'
	
	# entire obb folder
	obb() { umnt $intobb "obb"; }

	# game/app obb folder
	obbf() { umnt $intobb/$1 "obb/$1"; }
	
	# target folder
	target() { umnt "$intsd/$1" "intsd/$1"; }
	
	# source <--> destination
	from_to() { umnt "$intsd/$1" "intsd/$1"; }
	
	# data/data/app <--> $extsd/.app_data/app
	app_data() {
		if is_mounted /data/data/$1 && [ "$2" = "-u" ]; then
			echo "[/data/data/$1]"
			umount /data/data/$1
		fi
	}
	
	# intsd <--> extsd/.fbind
	int_extf() {
		umount $intobb
		umount $intsd/Android
		umount $intsd/data
		umnt $intsd "int_extf"
	}
	
	bind_mnt() { umnt "$2" "$2"; }
	
	: >$fbind_dir/.tmp
	grep -v '#' $config_file | grep -E 'app_data |int_extf|bind_mnt |obb|obbf |from_to |target ' >$fbind_dir/.tmp
	. $fbind_dir/.tmp
	
	echo -e "- Done.\n"
}


uninstall() {
	echo -e "<fbind Uninstall>\n"
	touch $ModPath/remove
	echo -e "(i) Reboot to apply change.\n"
}


rollback() {
	# entire obb folder
	obb() { mvdtR $extobb $intobb obb; }

	# game/app obb folder
	obbf() { mvdtR $extobb/$1 $intobb/$1 "obbf $1"; }

	# target folder
	target() { mvdtR "$extsd/$1" "$intsd/$1" "intsd/$1"; }
	
	# source <--> destination
	from_to() { mvdtR "$extsd/$2" "$intsd/$1" "intsd/$1"; }

	# data/data/app <--> $extsd/.app_data/app
	app_data() { mvdtR "$extsd/.app_data/$1" "/data/data/$1" "app_data $1"; }

	# intsd <--> extsd/.fbind
	int_extf() {
		umount $intobb
		umount $intsd/Android
		umount $intsd/data
		mvdtR $extsd/.fbind $intsd "intsd"
	}

	# Other
	bind_mnt() {
		if is_mounted "$2" && [ "$(ls "$1" 2>/dev/null)" ] && [ "$3" = "-mv" ]; then
			echo "[$2]"
			umount "$2"
			cp -a "$1"/* "$2" 2>/dev/null
			rm -rf "$1"/*
		fi
	}

	if [ -z "$1" ]; then
		echo -e "<Rollback>\n"
		: >$fbind_dir/.tmp
		grep -Ev '#' $config_file | grep -E 'app_data |int_extf|bind_mnt |obb|obbf |from_to |target ' >$fbind_dir/.tmp
		. $fbind_dir/.tmp

		uninstall
		rm -rf $fbind_dir
	fi
}


restore() {
	rollback --restore
	: >$tmp
	: >$tmp2
	INPUT=0
	if [ -z "$1" ]; then
		echo -e "<Data Restore>\n"
		grep -Ev '#|^$' $config_file | grep -E 'bind_mnt |from_to |target |obb.*'
		echo -e "\nInput a matching pattern at once."
		echo "- Hit ENTER when done or press CTRL (Vol. Down) + C to abort."
		until [ -z "$INPUT" ]; do
			read -r INPUT
			if [ -n "$INPUT" ]; then
				grep -v "$INPUT" $config_file >> $tmp
				grep "$INPUT" $config_file >> $tmp2
			fi
		done
	else
		grep -v "$1" $config_file >> $tmp
		grep "$1" $config_file >> $tmp2
	fi

	if grep -q '[a-z]' $tmp2; then
		mv $tmp $config_file
		set_perms $config_file
		echo "Restoring..."
		. $tmp2
		rm -f $tmp $tmp2
	else
		echo "(i) Nothing restored."
	fi
	echo
}


if grep -v '#' $config_file | grep -q '\-\-L'; then
	apply_cfg
else
	apply_cfg &> /dev/null
fi


case $1 in
	-a) add_line "-a" "$2";;
	-ad) add_line "-ad" "$2";;
	-as) add_line "-as" "$2";;
	-b) bind_folders;;
	-c) cleanupf;;
	-l) list_cfg;;
	-m) move_data;;
	-r) rm_line "$2";;
	-u) unmount_folders;;
	-mb) move_data; fbind -b;;
	-d) disable_service;;
	-e) enable_service;;
	--restore) restore "$2";;
	-log) cat $logfile;;
	-ref) cat $fbind_dir/info/README.md;;

	-umb)
		echo "Are you sure you know exactly what you're doing? (y/n)"
		read ans
		yn $ans "unmount_folders; move_data; bind_folders"
		;;

	--uninstall)
		echo "Are you sure you want to uninstall fbind? (y/n)"
		read ans
		yn $ans uninstall
		;;

	--rollback)
		echo 'Are you sure you want to uninstall fbind & move data back to intsd? (y/n)'
		read ans
		yn $ans rollback
		;;

	-f)
		rm -f $ModPath/auto_mount
		echo "(i) fbind toolkit disabled. Reboot to apply change."
		echo -e "- Re-enable with \"touch $ModPath/auto_mount\".\n"
		;;

	-x)
		touch $ModPath/disable
		echo "(i) Module disabled. Reboot to apply change."
		echo -e "- Re-enable from Magisk Manager or run \"rm $ModPath/disable\".\n"
		;;
	
	*) usage;;
esac


if [ -n "$SEck" ]; then
	$was_enforcing && setenforce 1
fi

rm $fbind_dir/.tmp $tmp $tmp2 2>/dev/null
exit 0
