#!/system/bin/sh

# fbind Toolkit
# VR25 @ XDA Developers


# Prepare Environment
export PATH=/dev/magisk/bin:$PATH
source /magisk/fbind/core.sh
service_enabled=$module_path/service.sh
service_disabled=$module_path/service.disabled
toolkit
echo




###TOOLBOX###

# Yes/No prompt
yn() {
	case "$1" in
		[Yy]* ) "$2";;
		[Nn]* ) exit 0;;
		* ) echo "(!) Invalid INPUT! Please re-run the command and answer yes or no."; exit 1;;
	esac
}

# Move data
mvdt() {
	echo "[$3]"
	if ! mntpt "$1" && [ "$(ls "$1")" ]; then
		echo "Moving $1/*..."
		[ -d "$2" ] || mkdir -p -m 777 "$2"
		cp -a "$1"/* "$2" 2>/dev/null
		rm -rf "$1"/*
	else
		echo '- Nothing to move.'
	fi
	echo
}

# Move data (rollback)
mvdtR() {
	echo "[$3]"
	if ! mntpt "$2" && [ "$(ls "$1")" ]; then
		echo "[$1]"
		[ -d "$2" ] || mkdir -p -m 777 "$2"
		cp -a "$1"/* "$2" 2>/dev/null
		rm -rf "$1"/*
	fi
}

umnt() {
	if mntpt "$1"; then
		echo "[$2]"
		umount "$1"
	fi
}




usage() {
	cat <<END
Magic Folder Binder Toolkit

Usage: fbind OPTION(s) ARGUMENT(s)

-a		Add line(s) to config.txt (interactive)
-b		Bind all
-c		Storage cleanup
-d		Disable autobind service
-e		Re-enable autobind service
-f		Disable this toolkit
-l		Show config.txt
-m		Move data to the sdcard
-r		Remove lines(s) from config.txt (interactive)
-u		Unbind everything
-x		Disable the module
-mb		Move data, bind folders
-ref		Show README
-log		Show debug.log
-chlog		Show changelog

-dd		Add "app_data AppDIR" line(s) to config.txt (interactive)

-umb		Unbind all, move data, rebind (CAUTION!)

-rollback	Unbind all, uninstall fbind & restore files

-uninstall	Unbind all & uninstall fbind

(i) The "-m" option affects unbound folders only. Caution: it replaces destination data!

(!) Warning: only use "fbind -umb" if you know exactly what you're doing! That option is only intended for first time use -- i.e., in case you forgot to move data after installing the module for the very first time and rebooted. Since "-m" only moves unbound folders data, the "-u" option makes it work. Again, once everything is unmounted, "-m" will then replace destination data.

(i) "fbind -mb" is the safer alternative, since it only moves new data. Let's say you just added a few lines to your config.txt file and the corresponding folders are not bound & data was not moved yet -- that's when you use this.
END
	echo
}


enable_service() {
	mv -f $service_disabled $service_enabled
	chmod 777 $service_enabled
	echo "(i) Auto-bind Enabled"
	echo
}

disable_service() {
	mv -f $service_enabled $service_disabled
	echo "(i) Auto-bind Disabled"
	echo
}


# Add line(s) to fbind config
add_line() {
	: > $tmp
	INPUT=0
	[ `tail -c 1 $config_file` ] && printf "\n" >> $config_file
	
	if [ "$1" = '-dd' ]; then
		: > $tmp2
		echo "$(ls -1 /data/data)" >> $tmp

		cat $tmp
		echo
		echo 'Input a matching WORD at once. Press RETURN twice when done.'
		until [ -z "$INPUT" ]; do
			read INPUT
			[ "$INPUT" ] && grep "$INPUT" $tmp | sed 's/^/app_data /' >> $tmp2
		done
		
		cat $tmp2 >> $config_file
		echo "Added line(s):"
		cat $tmp2
		rm -f $tmp $tmp2

	else
		echo 'Input 1 line at once. Press RETURN twice when done.'
		until [ -z "$INPUT" ]; do
			read INPUT
			[ "$INPUT" ] && echo "$INPUT" >> $tmp
		done
		
		echo "Added line(s):"
		cat $tmp
		cat $tmp >> $config_file
		chmod 777 $config_file
		rm -f $tmp
	fi
	echo
}


list_cfg() {
	echo "Your fbind Config"
	echo
	grep -Ev '#|^$' $config_file
	echo
}


move_data() {
	# entire obb folder
	echo '<Move Data>'
	echo
	
	obb() { mvdt $intobb $extobb obb; }
	
	# game/app obb folder
	obbf() { mvdt $intobb/$1 $extobb/$1 "obbf $1"; }

	# target folder
	target() { mvdt "$intsd/$1" "$extsd/$1" "target \"$1\""; }
	
	# source <--> destination
	from_to() { mvdt "$intsd/$1" "$extsd/$2" "from_to \"$1\" \"$2\""; }

	# data/data/app <--> $extsd/.app_data/app_data_folder
	app_data() {
		echo "[app_data $1]"
		if ! mntpt /data/data/$1 && [ "$(ls /data/data/$1)" ]; then
			echo "Copying /data/data/$1 to extsd/.app_data..."
			[ -d $extsd/.app_data/$1 ] || mkdir -p -m 751 $extsd/.app_data/$1
			cp -a /data/data/$1/* $extsd/.app_data/$1 2>/dev/null
			echo "rm -rf /data/data/$1" >> /data/.fbind_cleanup_list
			echo "- Original files will be removed on post-fs-data (fail-safe)."
		echo '- Nothing to move.'
		fi
		echo
	}
	
	# intsd <--> extsd/.fbind
	int_extf() { mvdt $intsd $extsd/.fbind "int_extf"
		{ obb
		target Android
		target data; } &>/dev/null
	}
	
	# Other
	bind_mnt() {
		echo "[$1]"
		if ! mntpt "$2" && [ "$(ls "$2")" ] && [ "$3" = "-mv" ]; then
			echo "Moving $2/*..."
			[ -d "$1" ] || mkdir -p -m 777 "$1"
			cp -a "$2"/* "$1" 2>/dev/null
			rm -rf "$2"/*
		echo '- Nothing to move.'
		fi
		echo
	}

	source $bind_list
	echo "Done."
	echo
}


rm_line() {
	: > $tmp
	: > $tmp2
	INPUT=0
	
	cat $config_file
	echo
	echo 'Input a matching WORD at once. Press RETURN twice when done.'
	until [ -z "$INPUT" ]; do
		read INPUT
		[ "$INPUT" ] && grep -v "$INPUT" $config_file >> $tmp && grep "$INPUT" $config_file >> $tmp2
	done
	
	cat $tmp > $config_file
	chmod 777 $config_file
	echo
	echo "Removed line(s):"
	cat $tmp2
	rm -f $tmp $tmp2
	echo
}


unmount_folders() {	
	echo '<Unmount Folders>'
	echo
	
	# entire obb folder
	obb() { umnt $intobb "obb"; }

	# game/app obb folder
	obbf() { umnt $intobb/$1 "obb/$1"; }
	
	# target folder
	target() { umnt "$intsd/$1" "intsd/$1"; }
	
	# source <--> destination
	from_to() { umnt "$intsd/$1" "intsd/$1"; }
	
	# data/data/app <--> $extsd/.app_data/app
	app_data() {
		if mntpt /data/data/$1 && [ "$2" = "-u" ]; then
			echo "[/data/data/$1]"
			umount /data/data/$1
		fi
	}
	
	# intsd <--> extsd/.fbind
	int_extf() { umnt $intsd "int_extf"
		{ obb
		target Android
		target data; } &>/dev/null
	}
	
	bind_mnt() { umnt "$2" "$2"; }
	
	source $bind_list
	echo
	echo "- Done."
	echo
}


uninstall() {
	echo "<fbind Uninstall>"
	touch $module_path/remove
	echo "- Done."
	echo "(i) Reboot to apply change."
}


rollback() {
	echo "<Rollback>"
	echo
	echo "fbind Uninstall"
	touch $module_path/remove
	echo "- Done."
	echo "(i) Reboot to apply change."
	echo
	echo 'Now restoring $intsd data...'
	echo
	
	# entire obb folder
	obb() { mvdtR $extobb $intobb obb; }

	# game/app obb folder
	obbf() { mvdtR $extobb/$1 $intobb/$1 "obbf $1"; }

	# target folder
	target() { mvdtR "$extsd/$1" "$intsd/$1" "intsd/$1"; }
	
	# source <--> destination
	from_to() { mvdtR "$extsd/$2" "$intsd/$1" "intsd/$1"; }

	# data/data/app <--> $extsd/.app_data/app
	app_data() {
		echo
		if mntpt /data/data/$1 && [ "$(ls "/data/data/$1")" ]; then
			mkdir -p /data/_restore/data_data 2>/dev/null
			echo "Copying $extsd/.app_data/* to /data/_restore/data_data..."
			cp -a $extsd/.app_data/* /data/_restore/data_data
			echo "Restoring /data/data..." > /data/_restore/restore.sh
			echo "cp -a /data/_restore/data_data/* /data/data" >> /data/_restore/restore.sh
			echo "rm -rf /data/_restore" >> /data/_restore/restore.sh
			echo "Done." >> /data/_restore/restore.sh
			chmod 777 /data/_restore/restore.sh
			echo "Source the script \"/data/_restore/restore.sh\" to finish the job after a normal reboot or (highly recommended) do that from recovery."
			echo "Remove \"$extsd/.app_data\" folder manually afterwards."
			echo
		fi
	}

	# intsd <--> extsd/.fbind
	int_extf() { mvdtR $extsd/.fbind $intsd "intsd"
		{ obb
		target Android
		target data; } &>/dev/null
	}
	
	# Other
	bind_mnt() {
		echo "[$1]"
		if mntpt "$2" && [ "$(ls "$1")" ] && [ "$3" = "-mv" ]; then
			echo "$2"
			umount "$2"
			cp -a "$1"/* "$2" 2>/dev/null
			rm -rf "$1"/*
		fi
	}
	
	source $bind_list
	echo
	echo "Done."
}



if grep -v '#' $config_file | grep -q 'cryptsetup=true'; then
	update_cfg
	apply_cfg
else
	update_cfg &> /dev/null
	apply_cfg &> /dev/null
fi
bkp_cfg

if [ "$1" = "-a" ]; then add_line
elif [ "$1" = "-dd" ]; then add_line '-dd'
elif [ "$1" = "-b" ]; then bind_folders
elif [ "$1" = "-c" ]; then cleanupf
elif [ "$1" = "-l" ]; then list_cfg
elif [ "$1" = "-m" ]; then move_data
elif [ "$1" = "-r" ]; then rm_line
elif [ "$1" = "-u" ]; then unmount_folders

elif [ "$1" = "-umb" ]; then
	echo "Are you sure you know exactly what you're doing? (y/n)"
	read ans
	yn $ans "unmount_folders; move_data; bind_folders"
	
elif [ "$1" = "-mb" ]; then move_data; bind_folders
elif [ "$1" = "-d" ]; then disable_service
elif [ "$1" = "-e" ]; then enable_service

elif [ "$1" = "-uninstall" ]; then
	echo "Are you sure you want to uninstall fbind? (y/n)"
	read ans
	yn $ans uninstall
	
elif [ "$1" = "-rollback" ]; then
	echo 'Are you sure you want to uninstall fbind & move data back to $intsd? (y/n)'
	read ans
	yn $ans rollback
	
elif [ "$1" = '-f' ]; then
	rm -f magisk/fbind/auto_mount
	echo "fbind toolkit disabled. Reboot to apply change."
	echo "- Re-enable by running \"touch $module_path/auto_mount\"."
	
elif [ "$1" = "-x" ]; then
	touch magisk/fbind/disable
	echo "(i) Module disabled. Reboot to apply change."
	echo "- Re-enable from Magisk Manager or run \"rm -f $module_path/disable\"."
	
elif [ "$1" = "-log" ]; then cat $logfile

elif [ "$1" = "-ref" ]; then cat /data/media/0/fbind/info/README.txt; echo; echo
elif [ "$1" = "-chlog" ]; then cat /data/media/0/fbind/info/changelog.txt; echo; echo

else usage
fi
exit 0
