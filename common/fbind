#!/system/bin/sh
# fbind (fbind CLI)
# Copyright (C) 2017-2018, VR25 @ xda-developers
# License: GPL v3+


modData=/data/media/fbind
tmp=/dev/fbind/tmp
config=$modData/config.txt
interactiveMode=true


# default perms
umask 000

# use Magisk's busybox
PATH=/sbin/.core/busybox:$PATH

echo

ls /data/system 2>/dev/null | grep -q . \
  || { echo -e "(!) fbind must run with root (su) privileges!\n"; exit 1; }

mkdir -p $modData
touch $modData/config.txt

# find modPath & load core
modPath=/sbin/.core/img/fbind
[ -f $modPath/module.prop ] \
  || { echo -e "\n(!) modPath not found\n"; exit 1; }
source $modPath/core.sh

# yes/no prompt
yn() {
  case "$1" in
    [Yy]* ) shift; $@;;
    [Nn]* ) exit 0;;
    * ) echo "(!) Invalid input"
        echo "- Please re-run the command and answer yes or no"
        exit 1;;
  esac
}

# move data
mvdt() {
  if ! is_mounted "$1" && [ -n "$(ls -A "$1" 2>/dev/null)" ]; then
    echo "[$3]"
    $modPath/bin/rsync -a "$1/" "$2" \
      && { rm -rf "$1"/* "$1"/.* 2>/dev/null || true; } \
      || { echo "(!) Source and destination data sizes don't match. Source data left intact"; return 1; }
  fi
}

# move data (rollback)
mvdtR() {
  if is_mounted "$2" && [ -n "$(ls -A "$1" 2>/dev/null)" ]; then
    umount "$2"
    echo "[$3]"
    $modPath/bin/rsync -a "$1/" "$2" \
      && { rm -rf "$1"/* "$1"/.* 2>/dev/null || true; } \
      || { echo "(!) Source and destination data sizes don't match. Source data left intact"; return 1; }
  fi
}

# unmount
umnt() {
  if is_mounted "$1"; then
    [ -n "$2" ] && echo "[$2]" || echo "$1"
    umount "$1"
  fi
}


usage() {
  cat <<END
Magic Folder Binder

Usage: fbind [options(s)] [argument(s)]

-a   Add line(s) to config.txt (interactive)
-b   Bind-mount all folders
-c   Cleanup storage
-f   Disable auto-mount module files (Magisk built-in feature)
-i   Display comprehensive info (config & statuses)
-m   Move data to the sdcard (affects unmounted folders only)
-r   Remove lines(s) from config.txt (interactive)
-u   Unmount all folders
-x   Disable module (Magisk built-in feature)
-mb   Move data & bind corresponding folders
ref   Display full reference (README.md)
log   Display last service.sh.log

-ad   Add "app_data" line(s) to config.txt (interactive)

-as   Ask for SOURCE dirs (intsd/SOURCE) & add corresponding "from_to" lines to config.txt (interactive)

restore   Move select data back to original locations (interactive)

rollback   Unmount all folders, uninstall fbind & restore data

[no args]   Open quick reference

uninstall   Unmount all folders & uninstall fbind

-h/--help/help   See all of this again

Pro tip: -ad, -b, -m, -mb, restore, -u and -umb, work with PATTERN and PATTERN1|PATTERN2|PATTERN... arguments as well.
  Examples:
    fbind -b WhatsA|Downl|ADM
    fbind -u ^obb$|mmcblk1p3|loop1.img
    fbind -m mGit
    fbind restore from_to

END
}


# add line(s) to fbind config
add_line() {
  echo -e "<Add config line(s)>\n"
  : >$tmp
  Input=0
  [ -n "$(tail -c 1 $config)" ] && printf "\n" >>$config

  if [ "$1" = "-ad" ]; then
    : >$tmp.2
    ls -1 /data/data >$tmp

    if [ -z "$2" ]; then
      cat $tmp
      echo -e "\n(i) Input a matching pattern at a time."
      echo "- Hit ENTER twice when finished. Press CTRL (Vol. Down) + C to abort."
      until [ -z "$Input" ]; do
        read -r Input
        [ -n "$Input" ] && grep "$Input" $tmp | sed 's/^/app_data /' >>$tmp.2
      done
    else
      for Line in $(grep -E "$2" $tmp 2>/dev/null); do
        echo $Line | sed 's/^/app_data /' >>$tmp.2
      done
    fi

    if grep -q '[a-z]' $tmp.2; then
      if [ -z "$2" ]; then echo "Added line(s):"; else echo "Added line:"; fi
      cat $tmp.2 | tee -a $config
    else
      echo "(i) No line(s) added."
    fi

  elif [ "$1" = "-as" ]; then
    if [ -z "$2" ]; then
      echo "(i) Input a source path at a time (i.e., Download or \"WhatsApp/Media/WhatsApp Video\")."
      echo "- Hit ENTER twice when finished. Press CTRL (Vol. Down) + C to abort."
      until [ -z "$Input" ]; do
        read -r Input
        if [ -n "$Input" ]; then
          echo "from_to \"$Input\" \".fbind/$Input\"" >> $tmp
        fi
      done
    else
      echo "from_to \"$2\" \".fbind/$2\"" >> $tmp
    fi

    if grep -q '[a-z]' $tmp; then
      if [ -z "$2" ]; then echo "Added line(s):"; else echo "Added line:"; fi
      cat $tmp | tee -a $config
    else
      echo "(i) No line(s) added."
    fi

  elif [ "$1" = "-a" ]; then
    if [ -z "$2" ]; then
      echo -e "(i) Input one line at a time."
      echo "- Hit ENTER twice when finished. Press CTRL (Vol. Down) + C to abort."
      until [ -z "$Input" ]; do
        read -r Input
        [ -n "$Input" ] && echo "$Input" >> $tmp
      done
    else
      echo "$2" >>$tmp
    fi

    if grep -q '[a-z]' $tmp; then
      if [ -z "$2" ]; then echo "Added line(s):"; else echo "Added line:"; fi
      cat $tmp | tee -a $config
    else
      echo "(i) No line(s) added."
    fi
  fi
  echo
}


statusf() {
  echo -e "PROPS\n"
  getprop | grep -E 'product|version|esdfs|fuse|sdcardfs' | sed 's/^/ /'
  echo -e "\n\nVARS\n"
  set | sed 's/^/ /'
  echo -e '\n'
  echo -e "CONFIG\n"
  if ! grep -q '[a-z]' $config; then
    echo "-- NULL --"
  else
    cat $config | while read line; do
      if echo "$line" | grep -Eq '^from_to |^target '; then
        echo $line | grep -q "$intsd/$(echo "$line" | awk '{print $2}' | sed 's/"//g' | sed "s/'//g")" /proc/mounts \
          && echo " $line <MOUNTED>" \
          || echo " $line <UNMOUNTED>"
      elif echo "$line" | grep -q '^obbf '; then
        is_mounted "$obb/$(echo "$line" | awk '{print $2}' | sed 's/"//g' | sed "s/'//g")" \
          && echo " $line <MOUNTED>" \
          || echo " $line <UNMOUNTED>"
      elif echo "$line" | grep -q '^obb$'; then
        is_mounted "$obb" \
          && echo " $line <MOUNTED>" \
          || echo " $line <UNMOUNTED>"
      elif echo "$line" | grep -Eq '^part |^LOOP |^bind_mnt '; then
        echo $line | grep -q "$(echo "$line" | awk '{print $3}' | sed 's/"//g' | sed "s/'//g")" /proc/mounts \
          && echo " $line <MOUNTED>" \
          || echo " $line <UNMOUNTED>"
      elif echo "$line" | grep -q 'app_data '; then
        echo $line | grep -q "$(echo "$line" | awk '{print $2}' | sed 's/"//g' | sed "s/'//g")" /proc/mounts \
          && echo " $line <MOUNTED>" \
          || echo " $line <UNMOUNTED>"
      else
        echo " $line"
      fi
    done
  fi
  echo
}


move_data() {
  echo "Moving data..."

  # entire obb folder
  obb() { mvdt $obb $extobb obb; }

  # game/app obb folder
  obbf() { mvdt $obb/$1 $extobb/$1 "obbf $1"; }

  # target folder
  target() { mvdt "$intsd/$1" "$extsd/$1" "target \"$1\""; }

  # source <--> destination
  from_to() { mvdt "$intsd/$1" "$extsd/$2" "from_to \"$1\" \"$2\""; }

  # data/data/pkgName <--> $appData/pkgName
  app_data() {
    if [ -n "$2" ] && ! echo "$2" | grep '\-u'; then
      appData="$2"
    else
      appData="$extsd/.app_data"
    fi
    mvdt "/data/data/$1" "$appData/$1" "app_data $1"
  }

  # intsd <--> extsd/.fbind
  int_extf() { mvdt $intsd $extsd/.fbind "int_extf"; }

  # Other
  bind_mnt() {
    if ! is_mounted "$2" && [ -n "$(ls -A "$2" 2>/dev/null)" ] && [ "$3" = "-mv" ]; then
      echo "[$2]"
            mkdir -p "$1" 2>/dev/null
      $modPath/bin/rsync -a "$2/" "$1" \
              && rm -rf "$2"/* "$2"/.* 2>/dev/null \
              || { echo "(!) Source and destination data sizes don't match. Source data left intact"; return 1; }
    fi
  }

  if [ -n "$1" ]; then
    grep -E '^app_data |^int_extf$|^bind_mnt |^obb.*|^from_to |^target ' $config | grep -E "$1" 2>/dev/null >$tmp.3
  else
    grep -E '^app_data |^int_extf$|^bind_mnt |^obb.*|^from_to |^target ' $config >$tmp.3
  fi
  . $tmp.3

  echo -e "- End\n"
}


rm_line() {
  : >$tmp
  : >$tmp.2
  Input=0
  if [ -z "$1" ]; then
    echo -e "<Remove Config Line(s)>\n"
    grep -v '^$' $config
    echo -e "\nInput a matching pattern at a time."
    echo "- Hit ENTER twice when done. Press CTRL (Vol. Down) + C to abort."
    until [ -z "$Input" ]; do
      read -r Input
      if [ -n "$Input" ]; then
        grep -v "$Input" $config >> $tmp
        grep "$Input" $config >> $tmp.2
      fi
    done
  else
    grep -Ev "$1" $config 2>/dev/null >>$tmp
    grep -E "$1" $config 2>/dev/null >>$tmp.2
  fi

  if grep -q '[a-z]' $tmp.2; then
    mv $tmp $config
    if [ -z "$1" ]; then echo "Removed line(s):"; else echo "Removed line:"; fi
    cat $tmp.2
    rm -f $tmp $tmp.2
    grep -q '[a-z]' $config || touch $modData/.no_restore
  else
    echo "No line(s) removed."
  fi
  echo
}


unmountf() {
  echo "Unmounting..."

  # entire obb folder
  obb() { umnt $obb "obb"; }

  # game/app obb folder
  obbf() { umnt $obb/$1 "obb/$1"; }

  # target folder
  target() { umnt "$intsd/$1" "intsd/$1"; }

  # source <--> destination
  from_to() { umnt "$intsd/$1" "intsd/$1"; }

  # data/data/pkgName <--> $appData/pkgName
  app_data() {
    if is_mounted /data/data/$1 && echo "$2 $3" | grep -q '\-u'; then
      echo "[/data/data/$1]"
      umount /data/data/$1
    fi
  }

  # intsd <--> extsd/.fbind
  int_extf() {
    umount $obb
    umount $intsd/Android
    umount $intsd/data
    umnt $intsd "int_extf"
  }

  bind_mnt() { umnt "$2" "$2"; }

  if [ -n "$1" ]; then
    # loop devices
    LOOP() {
      is_mounted "$2" && loopDevice="$(grep "$2" /proc/mounts | grep -i \.img | awk '{print $1}')" || \
        loopDevice=""
      umnt "$2" "$1"
      [ -n "$loopDevice" ] && losetup -d $loopDevice
    }

    # partitions
    part() {
      if echo "$1" | grep -q '\-\-L'; then
        PARTITION="$(echo $1 | sed 's/.*\///; s/--L//')"
        PPath="$(echo $1 | sed 's/--L//')"
        umnt "/dev/mapper/$PARTITION"
        umnt "$2" "$PPath"
      else
        umnt "$2" "$1"
      fi
    }

    grep -E '^app_data |^int_extf|^bind_mnt |^obb.*|^from_to |^target |^LOOP |^part ' $config | grep -E "$1" 2>/dev/null >$tmp.3
  else
    grep -E '^app_data |^int_extf|^bind_mnt |^obb.*|^from_to |^target ' $config >$tmp.3
  fi
  . $tmp.3

  echo -e "- End\n"
}


uninstall() {
  echo -e "<fbind Uninstall>\n"
  touch $modPath/remove
  echo -e "(i) Reboot to apply change.\n"
}


rollback() {
  # entire obb folder
  obb() { mvdtR $extobb $obb obb; }

  # game/app obb folder
  obbf() { mvdtR $extobb/$1 $obb/$1 "obbf $1"; }

  # target folder
  target() { mvdtR "$extsd/$1" "$intsd/$1" "intsd/$1"; }

  # source <--> destination
  from_to() { mvdtR "$extsd/$2" "$intsd/$1" "intsd/$1"; }

  # data/data/pkgName <--> $appData/pkgName
  app_data() {
    if [ -n "$2" ] && ! echo "$2" | grep '\-u'; then
      appData="$2"
    else
      appData="$extsd/.app_data"
    fi
    mvdtR "$appData/$1" "/data/data/$1" "app_data $1"
  }

  # intsd <--> extsd/.fbind
  int_extf() {
    umount $obb
    umount $intsd/Android
    umount $intsd/data
    mvdtR $extsd/.fbind $intsd "intsd"
  }

  # Other
  bind_mnt() {
    if is_mounted "$2" && [ -n "$(ls -A "$1" 2>/dev/null)" ] && [ "$3" = "-mv" ]; then
      echo "[$2]"
      umount "$2"
      $modPath/bin/rsync -a "$1/" "$2" \
              && rm -rf "$1"/* "$1"/.* 2>/dev/null \
              || { echo "(!) Source and destination data sizes don't match. Source data left intact"; return 1; }
    fi
  }

  if [ -z "$1" ]; then
    echo -e "<Rollback>\n"

    grep -E '^app_data |^int_extf$|^bind_mnt |^obb.*|^from_to |^target ' $conf >$tmp.3
    . $tmp.3

    uninstall
    rm -rf $modData
  fi
}


restore() {
  rollback restore
  : >$tmp
  : >$tmp.2
  Input=0
  if [ -z "$1" ]; then
    echo -e "<Data Restore>\n"
    grep -v '^$' $config | grep -E '^bind_mnt |^from_to |^target |^obb.*|^int_extf$'
    echo -e "\nInput PATTERN or 'PATTERN1|PATTERN2|PATTERNn'."
    echo "- Hit ENTER twice when done. Press CTRL (Vol. Down) + C to abort."
    until [ -z "$Input" ]; do
      read -r Input
      if [ -n "$Input" ]; then
        grep -v "$Input" $config >> $tmp
        grep "$Input" $config >> $tmp.2
      fi
    done
  else
    grep -Ev "$1" $config 2>/dev/null >>$tmp
    grep -E "$1" $config 2>/dev/null >>$tmp.2
  fi

  if grep -q '[a-z]' $tmp.2; then
    mv $tmp $config
    echo "Restoring..."
    . $tmp.2
    rm -f $tmp $tmp.2
  else
    echo "(i) Nothing restored."
  fi
  echo
}


quick_ref() {
  cat <<BLOCK
Magic Folder Binder Quick Reference

 <Essential commands>
  fbind -a   add cfg lines (interactive)
  fbind -b   bind-mount all folders
  fbind -h   list all commands
  fbind -i   comprehensive info (debugging, config & more)
  fbind -r   rem. cfg lines (interactive)
  fbind -u   unmount all folders
  fbind -mb   move unmounted; bind-mount all folders
  fbind log   last service.sh.log
  fbind ref   README.md

 <Basic config lines>
  obb   entire obb content to \$extsd
  int_extf   entire \$intsd to \$extsd/.fbind
  target Android/data   for non-media folders only
  obbf com.mojang.minecraftpe   single obb to \$extsd
  from_to WhatsApp .fbind/WhatsApp   best for media
BLOCK
  echo -e "\n(i) Run \"fbind\" (no args) to see this again.\n"
}


apply_config 1>/dev/null 2>&1

case $1 in
  -a) add_line "-a" "$2";;
  -ad) add_line "-ad" "$2";;
  -as) add_line "-as" "$2";;
  -b) bind_folders "$2";;
  -c) cleanupf;;
  -i) statusf;;
  -m) move_data "$2";;
  -r) rm_line "$2";;
  -u) unmountf "$2";;
  -mb) move_data "$2"; fbind -b "$2";;
  restore) restore "$2";;
  log) cat $logFile;;
  ref) cat $modData/info/README.md;;

  -umb)
    echo "Are you sure you know exactly what you're doing? (y/n)"
    read ans
    yn $ans unmountf "$2"\; move_data "$2"\; bind_folders "$2"
    ;;

  uninstall)
    echo "Are you sure you want to uninstall fbind? (y/n)"
    read ans
    yn $ans uninstall | grep -v fbind
    ;;

  rollback)
    echo 'Are you sure you want to uninstall fbind & move data back to \$intsd? (y/n)'
    read ans
    yn $ans rollback
    ;;

  -f)
    rm -f $modPath/auto_mount
    echo "(i) Auto-mount disabled. Reboot to apply change."
    echo -e "- Re-enable from Magisk Manager or by running \"touch $modPath/auto_mount\".\n"
    ;;

  -x)
    touch $modPath/disable
    echo "(i) Module disabled. Reboot to apply change."
    echo -e "- Re-enable from Magisk Manager or by running \"rm $modPath/disable\".\n"
    ;;

  -h|--help|help) usage;;

  *) quick_ref;;
esac

exit 0
