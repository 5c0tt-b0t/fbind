#!/system/bin/sh
# fbind Utilities
# Copyright (C) 2017-2018, VR25 @ xda-developers
# License: GPL V3+


main() {

  umask 000
  interactiveMode=true
  modPath=/system/etc/fbind
  modData=/data/media/0/fbind
  config=$modData/config.txt

  if [ ! -e $modPath/module.prop ]; then
    modPath=/sbin/.magisk/img/fbind
    if [ -e $modPath/module.prop ]; then
      PATH=/sbin/.magisk/busybox:$PATH
    else
      modPath=/sbin/.core/img/fbind
      PATH=/sbin/.core/busybox:$PATH
    fi
  fi

  exxit() {
    local exitCode=$?
    echo
    exit $exitCode
  }
  trap exxit EXIT

  # root check
  echo
  if ! ls /data/data 1>/dev/null 2>&1; then
    echo "(!) Must run as root (su)"
    exit 1
  fi

  if [ ! -e $modPath/module.prop ]; then
    echo "(!) modPath not found"
    exit 1
  fi

  mkdir -p $modData
  [ -e $config ] || touch $config
  . $modPath/core.sh
  apply_config # & handle LUKS

  case $1 in
    -b|--bind_mount) bind_mount "$2" "$3" 1>/dev/null;;
    -c|--config) shift; edit $config $@;;
    -C|--cryptsetup) shift; $modPath/bin/cryptsetup $@;;
    -f|--fuse) force_fuse;;
    -i|--info) info;;
    -l|--log) shift; edit $modData/logs/fbind-boot*.log $@;;
    -m|--mount) bind_mount_wrapper "$2";;
    -M|--move) mv_data_wrapper "$2";;
    -Mm) mv_data_wrapper "$2"; echo; bind_mount_wrapper "$2";;
    -r|--readme) shift; edit $modData/info/README.md $@;;
    -u|--unmount) unmount_wrapper "$2";;
    *) usage;;
  esac
}


# move data
mv_data() {
  if ! is_mounted "$1" && [ -n "$(ls -A "$1" 2>/dev/null)" ]; then
    echo
    echo "$1 --> $2"
    rm -rf "$2" 2>/dev/null
    if cp -a "$1" "$2"; then
      rm -rf "$1" 2>/dev/null
      return 0
    else
      echo "(!) Copy failed"
      echo "- Source data left intact"
      return 1
    fi
  fi
}


unmount() {
  if is_mounted "$1"; then
    echo "<$1>"
    umount -f "$1"
    if grep -iq sdcardfs /proc/mounts && echo "$1" | grep -q $prefix; then
      echo "<${1/default/read}>"
      umount -f "${1/default/read}"
      if is_mounted "${1/default/write}"; then
        echo "<${1/default/write}>"
        umount -f "${1/default/write}"
      fi
    fi
    rmdir "$1" 2>/dev/null
  fi
}


usage() {
  cat <<USAGE
fbind utilities
Copyright (C) 2017-2018, VR25 @ xda-developers
License: GPL V3+
$(grep versionCode $modPath/module.prop | sed 's/=/: /')

Usage: fbind <options(s)> <argument(s)>

-b/--bind_mount <target> <mount point>   Bind-mount folders not listed in config.txt. Extra SDcarsFS paths are handled automatically. Missing directories are created accordingly.
  e.g., fbind -b /data/someFolder /data/mountHere

-c/--config <editor [opts]>   Open config.txt w/ <editor [opts]> (default: vim/vi).
  e.g., fbind -c nano -l

-C/--cryptsetup <opt(s)> <arg(s)>   Run $modPath/bin/cryptsetup <opt(s)> <arg(s)>.

-f/--fuse   Toggle force FUSE yes/no (default: no). This is automatically enabled during installation if /data/forcefuse exists or the zip name contains the word "fuse" (case insensitive) or PROPFILE=true in config.sh. The setting persists across upgrades.

-i/--info   Show debugging info.

-l/--log  <editor [opts]>   Open fbind-boot-\$deviceName.log w/ <editor [opts]> (default: vim/vi).
  e.g., fbind -l

-m/--mount <pattern|pattern2|...>   Bind-mount matched or all (no arg).
  e.g., fbind -m Whats|Downl|part

-M/--move <pattern|pattern2|...>   Move matched or all (no args) to external storage. Only unmounted folders are affected.
  e.g., fbind -M Download|obb

-Mm <pattern|pattern2|...>   Same as "fbind -M <arg> && fbind -m <arg>"
  e.g., fbind -Mm

-r/--readme   Open README.md w/ <editor [opts]> (default: vim/vi).

-u/--unmount <pattern|pattern2|... or [mount point] >   Unmount matched or all (no arg). This works for regular bind-mounts, SDcardFS bind-mounts, regular partitions, loop devices and LUKS/LUKS2 encrypted volumes. Unmounting all doesn't affect partitions nor loop devices. These must be unmounted with a pattern argument. For unmounting folders bound with the -b/--bind_mount option, <mount point> must be supplied, since these pairs aren't in config.txt.
  e.g., fbind -u loop|part|Downl

Run fbind -r to see the full documentation (enter ":q!" to quit).
USAGE
}


info() {
  echo -e "PROPS\n"
  getprop | grep -E 'product|version|esdfs|fuse|sdcardfs' | sed 's/^/ /'
  echo -e "\n\nVARS\n"
  set | sed 's/^/ /'
  echo -e '\n'
  echo -e "CONFIG\n"
  if ! grep -q '[a-z]' $config; then
    echo "-- NULL --"
  else
    cat $config | while read line; do
      if echo "$line" | grep -Eq '^from_to |^target '; then
        echo $line | grep -q "$intsd/$(echo "$line" | awk '{print $2}' | sed 's/"//g' | sed "s/'//g")" /proc/mounts \
          && echo " $line <MOUNTED>" \
          || echo " $line <UNMOUNTED>"
      elif echo "$line" | grep -q '^obbf '; then
        is_mounted "$obb/$(echo "$line" | awk '{print $2}' | sed 's/"//g' | sed "s/'//g")" \
          && echo " $line <MOUNTED>" \
          || echo " $line <UNMOUNTED>"
      elif echo "$line" | grep -q '^obb$'; then
        is_mounted "$obb" \
          && echo " $line <MOUNTED>" \
          || echo " $line <UNMOUNTED>"
      elif echo "$line" | grep -Eq '^part |^loop |^bind_mount '; then
        echo $line | grep -q "$(echo "$line" | awk '{print $3}' | sed 's/"//g' | sed "s/'//g")" /proc/mounts \
          && echo " $line <MOUNTED>" \
          || echo " $line <UNMOUNTED>"
      else
        echo " $line"
      fi
    done
  fi
}


mv_data_wrapper() {
  echo "Moving..."

  obb() { mv_data $obb $extobb; }
  bind_mount() { mv_data "$2" "$1"; }
  obbf() { mv_data $obb/$1 $extobb/$1; }
  target() { mv_data "$intsd/$1" "$extsd/$1"; }
  from_to() { mv_data "$intsd/$1" "$extsd/$2"; }

  # $intsd --> $extsd/$1
  int_extf() {
    if [ -n "$1" ]; then
      mv_data $intsd "$extsd/$1"
    else
      mv_data $intsd $extsd/.fbind
    fi
  }

  if [ -n "$1" ]; then
    grep -E '^int_extf|^bind_mount |^obb|^from_to |^target ' $config 2>/dev/null | grep -E "$1" 1>$tmp.3 2>/dev/null
  else
    grep -E '^int_extf|^bind_mount |^obb|^from_to |^target ' $config 1>$tmp.3 2>/dev/null
  fi

  . $tmp.3
  echo
  echo "- End"
}


unmount_wrapper() {
  echo "Unmounting..."
  echo

  if is_mounted "$1"; then
    unmount "$1"

  else
    obb() { unmount $obb; }
    bind_mount() { unmount "$2"; }
    obbf() { unmount $obb/$1; }
    target() { unmount "$intsd/$1"; }
    from_to() { unmount "$intsd/$1"; }

    int_extf() {
      unmount $obb
      unmount $intsd/Android
      unmount $intsd/data
      unmount $intsd
    }

    if [ -n "$1" ]; then
      loop() { unmount "$2"; }

      part() {
        echo "$1 $2" | grep -q '^\-o ' && shift 2
        unmount "$2"
        echo "$1" | grep -q '\-\-L' \
          && $modPath/bin/cryptsetup luksClose $(echo ${1##*/} | sed 's/--L.*//')
      }

      grep -E '^int_extf|^bind_mount |^obb|^from_to |^target |^loop |^part ' $config | grep -E "$1" 2>/dev/null >$tmp.3

    else
      grep -E '^int_extf|^bind_mount |^obb|^from_to |^target ' $config >$tmp.3
    fi

    . $tmp.3
  fi
  echo
  echo "- End"
}


edit() {
  f=$1
  shift
  if [ -n "$1" ]; then
    $@ $f
  else
    vim $f 2>/dev/null || vi $f
  fi
}


force_fuse() {
  if [ -e $modPath/system.prop ]; then
    mv $modPath/system.prop $modPath/FUSE.prop
    echo "(i) Force FUSE: no"
    echo "- Change takes effect after a reboot"
  else
    mv $modPath/FUSE.prop $modPath/system.prop
    echo "(i) Force FUSE: yes"
    echo "- Change takes effect after a reboot"
  fi
}


main $@
